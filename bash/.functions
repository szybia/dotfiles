#!/usr/bin/env bash

mkcd() {
    mkdir -p "$1"
    cd "$1" || return
 }

cdls() {
    cd "$1" || return
    ls
}

md5check () {
    md5sum "$1" | grep "$2"
}

sha256check () {
    sha256sum "$1" | grep "$2"
}

histg () {
    history | rg -i -e "$1"
}

extract() {
    for file in "$@"
    do
        if [ -f "$file" ] ; then
          case $file in
            *.tar.bz2)   tar xjf "$file"     ;;
            *.tar.gz)    tar xzf "$file"     ;;
            *.targz)     tar xzf "$file"     ;;
            *.bz2)       bunzip2 "$file"     ;;
            *.rar)       unrar e "$file"     ;;
            *.gz)        gunzip "$file"      ;;
            *.tar)       tar xf "$file"      ;;
            *.tbz2)      tar xjf "$file"     ;;
            *.tgz)       tar xzf "$file"     ;;
            *.zip)       unzip "$file"       ;;
            *.Z)         uncompress "$file"  ;;
            *.7z)        7z x "$file"        ;;
            *)     echo "$file cannot be extracted via extract()" ;;
             esac
         else
             echo "$file is not a valid file"
         fi
    done
}

#   List all contents of current directory sorted by size
sbsall() {
        du -b --max-depth 1 | \
        sort -nr | \
        perl -pe 's{([0-9]+)}{sprintf "%.1f%s", $1>=2**30? ($1/2**30, "G"): $1>=2**20? ($1/2**20, "M"): $1>=2**10? ($1/2**10, "K"): ($1, "")}e';
}

#   List non-hidden directories of current directory sorted by size
sbs() { du -hsx ./* 2>/dev/null | sort -rh; }

up() {
    times=$1
    while [ "$times" -gt "0" ]; do
        cd ..
        # shellcheck disable=SC2004
        times=$(($times-1))
    done
}

# Make a temporary directory and enter it
mktmpcd() {
	local dir
	if [ $# -eq 0 ]; then
		dir=$(mktemp -d)
	else
		dir=$(mktemp -d -t "${1}.XXXXXXXXXX")
	fi
	cd "$dir" || exit
}

#   Enter a pre-existing tmp folder or create one
tmpcd() {
    shopt -s nullglob
    local tmps
    #   We assign `machine` in `.bashrc`
    # shellcheck disable=SC2154
    if [ "${machine}" == 'Mac' ]
    then
        tmps=( "$TMPDIR"/tmp.* )
    else
        tmps=( /tmp/tmp.* )
    fi

    #   If no tmp folders found $tmps will consist of pattern
    if [ "${#tmps[@]}" -eq 0 ]; then
        mktmpcd "$@"
    else
        cd "${tmps[0]}" || return
    fi
    shopt -u nullglob
}

# Compare original and gzipped file size
gz() {
	local origsize gzipsize ratio
	origsize=$(wc -c < "$1")
	gzipsize=$(gzip -c "$1" | wc -c)
    #   Calc is a bash function defined in this file
    ratio=$(calc "$gzipsize/$origsize*100")
	printf "orig: %d bytes\\n" "$origsize"
	printf "gzip: %d bytes (%2.2f%%)\\n" "$gzipsize" "$ratio"
}

# check if uri is up
isup() {
	local uri=$1

    [ "$#" -ne 1 ] && echo "Usage: ${FUNCNAME[0]} <URI>" && return 1

    #   If HTTP code not 200
    if curl -Ls -o /dev/null -w '%{http_code}' "$uri" | grep -v '200' > /dev/null; then
        return 1
    fi
}

# define word
def() {
    /usr/bin/firefox --new-tab -search "define $1"
}

# word synonym
syn() {
    /usr/bin/firefox --new-tab -search "synonym $1"
}

#   Create backup file
bak() { cp "$1"{,.bak};}
unbak() { mv "$1" "${1%".bak"}"; }

#   Crypto
shred_current_directory() {
    echo 'You will IRREVERSIBLY shred the following files:'
    find . ! -path .
    read -p 'Are you sure? (y/n): ' -r
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        echo 'shredding...'
        find . -type f -exec shred {} -n 1 -f --remove=wipe \;
        echo 'completed shredding.'
    fi
}

launch_ssh_agent() {
    eval "$(ssh-agent -s)"
    ssh-add
}

# Get colors in manual pages
man() {
    env \
    LESS_TERMCAP_mb="$(printf '\e[1;31m')" \
    LESS_TERMCAP_md="$(printf '\e[1;31m')" \
    LESS_TERMCAP_me="$(printf '\e[0m')" \
    LESS_TERMCAP_se="$(printf '\e[0m')" \
    LESS_TERMCAP_so="$(printf '\e[1;44;33m')" \
    LESS_TERMCAP_ue="$(printf '\e[0m')" \
    LESS_TERMCAP_us="$(printf '\e[1;32m')" \
    man "$@"
}

restart_gpgagent(){
    # Restart the gpg agent.
    # shellcheck disable=SC2046
    kill -9 $(pidof scdaemon) >/dev/null 2>&1
    # shellcheck disable=SC2046
    kill -9 $(pidof gpg-agent) >/dev/null 2>&1
    gpg-connect-agent /bye >/dev/null 2>&1
    gpg-connect-agent updatestartuptty /bye >/dev/null 2>&1
}

#   randpw [--no-symbols,-n] [--clip,-c] [pass-length]
#       Generate password from /dev/urandom of <pass-length> (default 25).
#       optionally exclude symbols or pipe into clipboard.
randpw() {
    local length=25 clip=0 chars='A-Za-z0-9[:punct:]' pass
    while true; do case $1 in
        -n|--no-symbols) chars='A-Za-z0-9'; shift ;;
        -c|--clip) clip=1; shift ;;
        -cn) clip=1 chars='A-Za-z0-9'; shift;;
        *[0-9]*) length="$1"; shift;;
        *) break;;
    esac done
    pass=$( LC_ALL=C </dev/urandom tr -dc "$chars" | head -c "${1:-$length}" )
    echo -n "$pass" | { if (( clip == 1 )); then ccopy; else cat -; fi; }
}

rename_snake() {
    # Credit:
    #   https://www.tecmint.com/rename-all-files-and-directory-names-to-lowercase-in-linux/
    if [ -z "$1" ];then
        >&2 echo "Usage: ${FUNCNAME[0]} <directory>"
        return 1
    fi

    #process all subdirectories and files in parent directory
    all="$(find "$1" -maxdepth 1)"

    IFS=$'\n'   #   only split on newline in case spaces in filename
    for name in ${all}; do
        #   set new name in lower case for files and directories
        new_name="$(dirname "${name}")/$(basename "${name}" | tr '[:upper:]' '[:lower:]')"
        #   replace spaces with tabs in new_name
        new_name="${new_name// /_}"

        #   check if new name already exists
        if [ "${name}" != "${new_name}" ]; then
            [ ! -e "${new_name}" ] && mv -T "${name}" "${new_name}"; echo "${name} was renamed to ${new_name}" || echo "${name} wasn't renamed!"
        fi
    done
    unset IFS
}

#   create .tar.gz and remove it if successful
#   basename takes care of trailing backslash in directory
targz() { tar -zcvf "$(basename "$1").tar.gz" "$1" && rm -r "$1"; }

#   extract tar.gz and remove it if successful
untargz() { tar -zxvf "$1" && rm -r "$1"; }

#   calculate
calc(){ awk "BEGIN { print ""$*"" }"; }

#   generate UUID
uuid() {
    local clip=0
    while true; do case $1 in
        -c|--clip) clip=1; shift ;;
        *) break;;
    esac done
python3 -c 'import uuid; print(uuid.uuid4(), end="")' | { if (( clip == 1 )); then ccopy; else cat -; fi; }
}

#   Prettyfi a python object stored in clipboard
pythonpretty() {
    cpaste | python -c "$(cat <<EOF
import ast, json, sys
o = ast.literal_eval(sys.stdin.read())
print(json.dumps(o, indent=2))
EOF
)"
}

# Copy string into clipboard
clipb () {
    echo "$@" | ccopy
}

# The amount of mistypes is too damn high
clibp () {
    clipb "$@"
}

rsed() {
    rg -l "$1" . | xargs sed -i '' -E "s/$1/$2/g"
}


hubprnew() {
    hub pull-request -od "$@"
}

hubclfork() {
    if [ -z "$1" ];then
        >&2 echo "Usage: ${FUNCNAME[0]} <hub_clone_repo>"
        return 1
    fi

    local repo="$1" arguments
    IFS='/' read -ra arguments <<< "$1"
    if (( ${#arguments[@]} > 2 )); then
        >&2 echo "Usage: ${FUNCNAME[0]} <hub_clone_repo>"
        return 1
    fi

    if (( ${#arguments[@]} == 2 )); then
        repo="${arguments[1]}"
    fi

    hub clone "$1" && \
        cd "${repo}" && \
        hub fork --remote-name origin
}


goclean() {
 local pkg=$1; shift || return 1
 local ost cnt

 # Clean removes object files from package source directories (ignore error)
 go clean -i "${pkg}" &>/dev/null

 # Set local variables
 [[ "$(uname -m)" == "x86_64" ]] \
 && ost="$(uname)";ost="${ost,,}_amd64" \
 && cnt="${pkg//[^\/]}"

 # Delete the source directory and compiled package directory(ies)
 if (("${#cnt}" == "2")); then
  rm -rf "${GOPATH%%:*}/src/${pkg%/*}"
  rm -rf "${GOPATH%%:*}/pkg/${ost}/${pkg%/*}"
 elif (("${#cnt}" > "2")); then
  rm -rf "${GOPATH%%:*}/src/${pkg%/*/*}"
  rm -rf "${GOPATH%%:*}/pkg/${ost}/${pkg%/*/*}"
 fi
}

# Ain't nobody got time for finding ~
vimhome() {
    vim "$HOME/$1"
}

# Define repl when reading books
definerepl() {
    #   When we ctrl-c we want to exit the loop. We run in a sub-shell since
    #   we don't want the trap to be active in our terminal after we exit
    (
        trap "return 0" SIGINT
        while true
        do
            read -rp "define: " word
            [[ -z "${word// }" ]] && continue
            define "${word}"
        done
    )
}

# Add this to your .bashrc, .zshrc or equivalent.
# Run 'fff' with 'f' or whatever you decide to name the function.
f() {
    fff "$@"
    cd "$(cat "${XDG_CACHE_HOME:=${HOME}/.cache}/fff/.fff_d")" || exit
}

vdefault() {
    vagrant destroy -f "$(vagrant global-status --prune | head -3 | tail -1 | awk '{print $1}')"
}

#   This seems to take a bit and isn't needed in every terminal
setupssh() {
    #   SSH agent
    # shellcheck disable=SC1090
    source ~/.ssh-find-agent.sh
    set_ssh_agent_socket
}

topp() {
  "$@" &>/dev/null &
  pid="$!"
  trap ':' INT
  echo 'RSS  MEM'
  while sleep 1; do \ps -o 'rss,%mem' -p "$pid"; done
  kill "$pid"
}

